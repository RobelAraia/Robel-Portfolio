{"ast":null,"code":"import _objectSpread from \"C:/Users/dipse/test/Portfolio-2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/dipse/test/Portfolio-2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport raf from 'raf';\nvar MODE;\n\n(function (MODE) {\n  MODE[MODE[\"MODE_TIMEOUT\"] = 0] = \"MODE_TIMEOUT\";\n  MODE[MODE[\"MODE_INTERVAL\"] = 1] = \"MODE_INTERVAL\";\n})(MODE || (MODE = {}));\n\nvar fnMap = new Map();\nvar executionSet = new Set();\nvar rafStarted = false;\nvar startId = 0;\n\nfunction getTimeStamp() {\n  return new Date().getTime();\n}\n\nfunction executeFn(value) {\n  var fn = value.fn,\n      args = value.args;\n  fn.apply(void 0, _toConsumableArray(args));\n}\n\nfunction runFunction() {\n  if (executionSet.size === 0) return;\n  executionSet.forEach(executeFn);\n  executionSet.clear();\n}\n\nvar checkTick = function checkTick(currentTimeTick) {\n  return function (value, id) {\n    var nextTick = value.nextTick,\n        ms = value.ms,\n        mode = value.mode;\n\n    if (currentTimeTick - nextTick >= 0) {\n      executionSet.add(value);\n\n      if (mode === MODE.MODE_TIMEOUT) {\n        fnMap.delete(id);\n      } else {\n        fnMap.set(id, _objectSpread(_objectSpread({}, value), {}, {\n          nextTick: nextTick + ms\n        }));\n      }\n    }\n  };\n};\n\nfunction loop() {\n  if (fnMap.size === 0) {\n    rafStarted = false;\n    return;\n  }\n\n  var currentTimeTick = getTimeStamp();\n  fnMap.forEach(checkTick(currentTimeTick));\n  runFunction();\n\n  if (fnMap.size === 0) {\n    rafStarted = false;\n    return;\n  }\n\n  raf(loop);\n}\n\nfunction addId(_ref) {\n  var fn = _ref.fn,\n      ms = _ref.ms,\n      args = _ref.args,\n      mode = _ref.mode;\n  if (!fn) return null;\n  var currentId = startId;\n  fnMap.set(currentId, {\n    fn: fn,\n    ms: ms,\n    nextTick: getTimeStamp() + ms,\n    args: args,\n    mode: mode\n  });\n\n  if (!rafStarted) {\n    rafStarted = true;\n    raf(loop);\n  }\n\n  startId += 1;\n  return currentId;\n}\n\nfunction removeId(id) {\n  if (id == null) return;\n\n  if (fnMap.has(id)) {\n    fnMap.delete(id);\n  }\n}\n\nexport var setTimeout = function setTimeout(fn) {\n  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return addId({\n    fn: fn,\n    ms: ms,\n    args: args,\n    mode: MODE.MODE_TIMEOUT\n  });\n};\nexport var clearTimeout = removeId;\nexport var setInterval = function setInterval(fn) {\n  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  return addId({\n    fn: fn,\n    ms: ms,\n    args: args,\n    mode: MODE.MODE_INTERVAL\n  });\n};\nexport var clearInterval = removeId;\nexport default {\n  setTimeout: setTimeout,\n  clearTimeout: clearTimeout,\n  setInterval: setInterval,\n  clearInterval: clearInterval\n};","map":{"version":3,"mappings":"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","names":["raf","MODE","fnMap","Map","executionSet","Set","rafStarted","startId","getTimeStamp","Date","getTime","executeFn","value","fn","args","runFunction","size","forEach","clear","checkTick","currentTimeTick","id","nextTick","ms","mode","add","MODE_TIMEOUT","delete","set","loop","addId","currentId","removeId","has","setTimeout","clearTimeout","setInterval","MODE_INTERVAL","clearInterval"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}