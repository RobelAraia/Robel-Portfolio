{"ast":null,"code":"import raf from 'raf';\nvar MODE;\n\n(function (MODE) {\n  MODE[MODE[\"MODE_TIMEOUT\"] = 0] = \"MODE_TIMEOUT\";\n  MODE[MODE[\"MODE_INTERVAL\"] = 1] = \"MODE_INTERVAL\";\n})(MODE || (MODE = {}));\n\nconst fnMap = new Map();\nconst executionSet = new Set();\nlet rafStarted = false;\nlet startId = 0;\n\nfunction getTimeStamp() {\n  return new Date().getTime();\n}\n\nfunction executeFn(value) {\n  const {\n    fn,\n    args\n  } = value;\n  fn(...args);\n}\n\nfunction runFunction() {\n  if (executionSet.size === 0) return;\n  executionSet.forEach(executeFn);\n  executionSet.clear();\n}\n\nconst checkTick = currentTimeTick => (value, id) => {\n  const {\n    nextTick,\n    ms,\n    mode\n  } = value;\n\n  if (currentTimeTick - nextTick >= 0) {\n    executionSet.add(value);\n\n    if (mode === MODE.MODE_TIMEOUT) {\n      fnMap.delete(id);\n    } else {\n      fnMap.set(id, { ...value,\n        nextTick: nextTick + ms\n      });\n    }\n  }\n};\n\nfunction loop() {\n  if (fnMap.size === 0) {\n    rafStarted = false;\n    return;\n  }\n\n  const currentTimeTick = getTimeStamp();\n  fnMap.forEach(checkTick(currentTimeTick));\n  runFunction();\n\n  if (fnMap.size === 0) {\n    rafStarted = false;\n    return;\n  }\n\n  raf(loop);\n}\n\nfunction addId(_ref) {\n  let {\n    fn,\n    ms,\n    args,\n    mode\n  } = _ref;\n  if (!fn) return null;\n  const currentId = startId;\n  fnMap.set(currentId, {\n    fn,\n    ms,\n    nextTick: getTimeStamp() + ms,\n    args,\n    mode\n  });\n\n  if (!rafStarted) {\n    rafStarted = true;\n    raf(loop);\n  }\n\n  startId += 1;\n  return currentId;\n}\n\nfunction removeId(id) {\n  if (id == null) return;\n\n  if (fnMap.has(id)) {\n    fnMap.delete(id);\n  }\n}\n\nexport const setTimeout = function (fn) {\n  let ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return addId({\n    fn,\n    ms,\n    args,\n    mode: MODE.MODE_TIMEOUT\n  });\n};\nexport const clearTimeout = removeId;\nexport const setInterval = function (fn) {\n  let ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  return addId({\n    fn,\n    ms,\n    args,\n    mode: MODE.MODE_INTERVAL\n  });\n};\nexport const clearInterval = removeId;\nexport default {\n  setTimeout,\n  clearTimeout,\n  setInterval,\n  clearInterval\n};","map":{"version":3,"mappings":"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","names":["raf","MODE","fnMap","Map","executionSet","Set","rafStarted","startId","getTimeStamp","Date","getTime","executeFn","value","fn","args","runFunction","size","forEach","clear","checkTick","currentTimeTick","id","nextTick","ms","mode","add","MODE_TIMEOUT","delete","set","loop","addId","currentId","removeId","has","setTimeout","clearTimeout","setInterval","MODE_INTERVAL","clearInterval"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}